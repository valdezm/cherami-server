// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package replicator

import goreplicator "github.com/uber/cherami-thrift/.generated/go/replicator"
import mock "github.com/stretchr/testify/mock"
import tchannel "github.com/uber/tchannel-go"

// ClientFactory is an autogenerated mock type for the ClientFactory type
type MockReplicatorClientFactory struct {
	mock.Mock
}

// GetHostsForAllDeployment provides a mock function with given fields:
func (_m *MockReplicatorClientFactory) GetHostsForAllDeployment() map[string][]string {
	ret := _m.Called()

	var r0 map[string][]string
	if rf, ok := ret.Get(0).(func() map[string][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	return r0
}

// GetHostsForDeployment provides a mock function with given fields: deployment
func (_m *MockReplicatorClientFactory) GetHostsForDeployment(deployment string) []string {
	ret := _m.Called(deployment)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(deployment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetReplicatorClient provides a mock function with given fields: zone
func (_m *MockReplicatorClientFactory) GetReplicatorClient(zone string) (goreplicator.TChanReplicator, error) {
	ret := _m.Called(zone)

	var r0 goreplicator.TChanReplicator
	if rf, ok := ret.Get(0).(func(string) goreplicator.TChanReplicator); ok {
		r0 = rf(zone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(goreplicator.TChanReplicator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(zone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTChannel provides a mock function with given fields: ch
func (_m *MockReplicatorClientFactory) SetTChannel(ch *tchannel.Channel) {
	_m.Called(ch)
}

// UpdateHostsForDeployment provides a mock function with given fields: deployment, hosts
func (_m *MockReplicatorClientFactory) UpdateHostsForDeployment(deployment string, hosts []string) {
	_m.Called(deployment, hosts)
}
